{"/home/travis/build/npmtest/node-npmtest-reflux/test.js":"/* istanbul instrument in package npmtest_reflux */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-reflux/lib.npmtest_reflux.js":"/* istanbul instrument in package npmtest_reflux */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_reflux = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_reflux = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-reflux/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-reflux && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_reflux */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_reflux\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_reflux.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_reflux.rollup.js'] =\n            local.assetsDict['/assets.npmtest_reflux.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_reflux.__dirname +\n                    '/lib.npmtest_reflux.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-reflux/reflux/src/index.js":"var Reflux = require('reflux-core');\r\n\r\nReflux.serverMode = typeof window !== 'object';\r\n\r\nReflux.connect = require('./connect');\r\n\r\nReflux.connectFilter = require('./connectFilter');\r\n\r\nReflux.ListenerMixin = require('./ListenerMixin');\r\n\r\nReflux.listenTo = require('./listenTo');\r\n\r\nReflux.listenToMany = require('./listenToMany');\r\n\r\nrequire('./addES6');\r\n\r\nmodule.exports = Reflux;\r\n","/home/travis/build/npmtest/node-npmtest-reflux/reflux/src/connect.js":"var ListenerMethods = require('reflux-core/lib/ListenerMethods'),\r\n    ListenerMixin = require('./ListenerMixin'),\r\n    _ = require('reflux-core/lib/utils');\r\n\r\nmodule.exports = function(listenable, key) {\r\n\r\n    _.throwIf(typeof(key) === 'undefined', 'Reflux.connect() requires a key.');\r\n\r\n    return {\r\n        getInitialState: function() {\r\n            if (!_.isFunction(listenable.getInitialState)) {\r\n                return {};\r\n            }\r\n\r\n            return _.object([key],[listenable.getInitialState()]);\r\n        },\r\n        componentDidMount: function() {\r\n            var me = this;\r\n\r\n            _.extend(me, ListenerMethods);\r\n\r\n            this.listenTo(listenable, function(v) {\r\n                me.setState(_.object([key],[v]));\r\n            });\r\n        },\r\n        componentWillUnmount: ListenerMixin.componentWillUnmount\r\n    };\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-reflux/reflux/src/ListenerMixin.js":"var _ = require('reflux-core/lib/utils'),\r\n    ListenerMethods = require('reflux-core/lib/ListenerMethods');\r\n\r\n/**\r\n * A module meant to be consumed as a mixin by a React component. Supplies the methods from\r\n * `ListenerMethods` mixin and takes care of teardown of subscriptions.\r\n * Note that if you're using the `connect` mixin you don't need this mixin, as connect will\r\n * import everything this mixin contains!\r\n */\r\nmodule.exports = _.extend({\r\n\r\n    /**\r\n     * Cleans up all listener previously registered.\r\n     */\r\n    componentWillUnmount: ListenerMethods.stopListeningToAll\r\n\r\n}, ListenerMethods);\r\n","/home/travis/build/npmtest/node-npmtest-reflux/reflux/src/connectFilter.js":"var ListenerMethods = require('reflux-core/lib/ListenerMethods'),\r\n    ListenerMixin = require('./ListenerMixin'),\r\n    _ = require('reflux-core/lib/utils');\r\n\r\nmodule.exports = function(listenable, key, filterFunc) {\r\n\r\n    _.throwIf(_.isFunction(key), 'Reflux.connectFilter() requires a key.');\r\n\r\n    return {\r\n        getInitialState: function() {\r\n            if (!_.isFunction(listenable.getInitialState)) {\r\n                return {};\r\n            }\r\n\r\n            // Filter initial payload from store.\r\n            var result = filterFunc.call(this, listenable.getInitialState());\r\n            if (typeof(result) !== 'undefined') {\r\n                return _.object([key], [result]);\r\n            } else {\r\n                return {};\r\n            }\r\n        },\r\n        componentDidMount: function() {\r\n            var me = this;\r\n\r\n            _.extend(this, ListenerMethods);\r\n\r\n            this.listenTo(listenable, function(value) {\r\n                var result = filterFunc.call(me, value);\r\n                me.setState(_.object([key], [result]));\r\n            });\r\n        },\r\n        componentWillUnmount: ListenerMixin.componentWillUnmount\r\n    };\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-reflux/reflux/src/listenTo.js":"var ListenerMethods = require('reflux-core/lib/ListenerMethods');\r\n\r\n/**\r\n * A mixin factory for a React component. Meant as a more convenient way of using the `ListenerMixin`,\r\n * without having to manually set listeners in the `componentDidMount` method.\r\n *\r\n * @param {Action|Store} listenable An Action or Store that should be\r\n *  listened to.\r\n * @param {Function|String} callback The callback to register as event handler\r\n * @param {Function|String} defaultCallback The callback to register as default handler\r\n * @returns {Object} An object to be used as a mixin, which sets up the listener for the given listenable.\r\n */\r\nmodule.exports = function(listenable,callback,initial){\r\n    return {\r\n        /**\r\n         * Set up the mixin before the initial rendering occurs. Import methods from `ListenerMethods`\r\n         * and then make the call to `listenTo` with the arguments provided to the factory function\r\n         */\r\n        componentDidMount: function() {\r\n            for(var m in ListenerMethods){\r\n                if (this[m] !== ListenerMethods[m]){\r\n                    if (this[m]){\r\n                        throw \"Can't have other property '\"+m+\"' when using Reflux.listenTo!\";\r\n                    }\r\n                    this[m] = ListenerMethods[m];\r\n                }\r\n            }\r\n            this.listenTo(listenable,callback,initial);\r\n        },\r\n        /**\r\n         * Cleans up all listener previously registered.\r\n         */\r\n        componentWillUnmount: ListenerMethods.stopListeningToAll\r\n    };\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-reflux/reflux/src/listenToMany.js":"var ListenerMethods = require('reflux-core/lib/ListenerMethods');\r\n\r\n/**\r\n * A mixin factory for a React component. Meant as a more convenient way of using the `listenerMixin`,\r\n * without having to manually set listeners in the `componentDidMount` method. This version is used\r\n * to automatically set up a `listenToMany` call.\r\n *\r\n * @param {Object} listenables An object of listenables\r\n * @returns {Object} An object to be used as a mixin, which sets up the listeners for the given listenables.\r\n */\r\nmodule.exports = function(listenables){\r\n    return {\r\n        /**\r\n         * Set up the mixin before the initial rendering occurs. Import methods from `ListenerMethods`\r\n         * and then make the call to `listenTo` with the arguments provided to the factory function\r\n         */\r\n        componentDidMount: function() {\r\n            for(var m in ListenerMethods){\r\n                if (this[m] !== ListenerMethods[m]){\r\n                    if (this[m]){\r\n                        throw \"Can't have other property '\"+m+\"' when using Reflux.listenToMany!\";\r\n                    }\r\n                    this[m] = ListenerMethods[m];\r\n                }\r\n            }\r\n            this.listenToMany(listenables);\r\n        },\r\n        /**\r\n         * Cleans up all listener previously registered.\r\n         */\r\n        componentWillUnmount: ListenerMethods.stopListeningToAll\r\n    };\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-reflux/reflux/src/addES6.js":"\r\n/* globals React: false */\r\n\r\nvar Reflux = require('reflux-core');\r\nReflux.defineReact = require('./defineReact');\r\n\r\n// useful utility for ES6 work, mimics the ability to extend\r\nReflux.utils.inherits = function(subClass, superClass) {\r\n\tif (typeof superClass !== \"function\" && superClass !== null) {\r\n\t\tthrow new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\r\n\t}\r\n\tsubClass.prototype = Object.create(superClass && superClass.prototype, {\r\n\t\tconstructor: {\r\n\t\t\tvalue: subClass,\r\n\t\t\tenumerable: false,\r\n\t\t\twritable: true,\r\n\t\t\tconfigurable: true\r\n\t\t}\r\n\t});\r\n\tif (superClass) {\r\n\t\tif (Object.setPrototypeOf) {\r\n\t\t\tObject.setPrototypeOf(subClass, superClass);\r\n\t\t} else {\r\n\t\t\t/* jshint proto: true */\r\n\t\t\tsubClass.__proto__ = superClass;\r\n\t\t}\r\n\t}\r\n};\r\n\r\n// first try to see if there's a global React var and use it\r\nif (typeof React !== 'undefined' && React) {\r\n\tReflux.defineReact(React);\r\n// otherwise we're gonna resort to 'try' stuff in case of other environments\r\n} else {\r\n\ttry {\r\n\t\tvar R = require(\"react\"); // we ignore this in browserify manually (see grunt file), so it's more of a doublecheck for in node\r\n\t\tReflux.defineReact(R);\r\n\t} catch (e) {}\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-reflux/reflux/src/defineReact.js":"/* globals React: false */\r\n\r\nvar Reflux = require('reflux-core');\r\n\r\n/**\r\n * Reflux.defineReact function where you can manually supply\r\n * the React object in order to create in case Reflux needs to load before\r\n * React or there is a modular environment where there won't be a global\r\n * React variable.\r\n * @note The third param is for internal usage only.\r\n */\r\nvar _react, _defined = false;\r\nfunction defineReact(react, noLongerUsed, extend)\r\n{\r\n\tvar proto, _extend;\r\n\t\r\n\t// if no Reflux object is yet available then return and just wait until defineReact is called manually with it\r\n\ttry {\r\n\t\t_react  = react  || _react  || React;\r\n\t\t_extend = extend || _react.Component;\r\n\t} catch (e) {\r\n\t\treturn;\r\n\t}\r\n\t\r\n\t// if Reflux and React aren't present then ignore, wait until they are properly present\r\n\t// also ignore if it's been called before UNLESS there's manual extending happening\r\n\tif (!_react || !_extend || (_defined && !extend)) {\r\n\t\treturn;\r\n\t}\r\n\t\r\n\t// ----------- BEGIN Reflux.Component ------------\r\n\t/**\r\n\t * Reflux.Component:\r\n\t * An implementation for idiomatic React.js classes that mix with\r\n\t * Reflux stores. To utilize extend Reflux.Component instead of\r\n\t * React.Component. Then you may hook any Reflux store that has a\r\n\t * `this.state` property containing its state values to the component\r\n\t * via `this.store` or an Array of Reflux stores via `this.stores` in\r\n\t * the component's constructor (similar to how you assign initial state\r\n\t * in the constructor in ES6 style React). The default values of the\r\n\t * stores will automatically reflect in the component's state, and any\r\n\t * further `trigger` calls from that store will update properties passed\r\n\t * in the trigger into the component automatically.\r\n\t */\r\n\tvar RefluxComponent = function(props, context, updater) {\r\n\t\t_extend.call(this, props, context, updater);\r\n\t};\r\n\t\r\n\t// equivalent of `extends React.Component` or other class if provided via `extend` param\r\n\tReflux.utils.inherits(RefluxComponent, _extend);\r\n\t\r\n\tproto = RefluxComponent.prototype;\r\n\t\r\n\t/**\r\n\t * this.storeKeys\r\n\t * When this is a falsey value (null by default) the component mixes in\r\n\t * all properties from the stores attached to it and updates on changes\r\n\t * from all of them. When set to an array of string keys it will only\r\n\t * utilized state property names of those keys in any store attached. This\r\n\t * lets you choose which parts of stores update the component on a component-\r\n\t * by-component basis. If using this it is best set in the constructor.\r\n\t */\r\n\tproto.storeKeys = null;\r\n\t\r\n\t// on the mounting of the component that is where the store/stores are attached and initialized if needed\r\n\tproto.componentWillMount = function () {\r\n\t\t// if there is a this.store then simply push it onto the this.stores array or make one if needed\r\n\t\tif (this.store) {\r\n\t\t\tif (Array.isArray(this.stores)) {\r\n\t\t\t\tthis.stores.unshift(this.store);\r\n\t\t\t} else {\r\n\t\t\t\tthis.stores = [this.store];\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (this.stores) {\r\n\t\t\tthis.__storeunsubscribes__ = this.__storeunsubscribes__ || [];\r\n\t\t\tvar sS = this.setState.bind(this);\r\n\t\t\t// this handles the triggering of a store, checking what's updated if proto.storeKeys is utilized\r\n\t\t\tvar onStoreTrigger = function(obj){\r\n\t\t\t\tvar updateObj = filterByStoreKeys(this.storeKeys, obj);\r\n\t\t\t\tif (updateObj) {\r\n\t\t\t\t\tsS(updateObj);\r\n\t\t\t\t}\r\n\t\t\t}.bind(this);\r\n\t\t\t// for each store in this.stores...\r\n\t\t\tfor (var i = 0, ii = this.stores.length; i < ii; i++) {\r\n\t\t\t\tvar str = this.stores[i];\r\n\t\t\t\t// if's a function then we know it's a class getting passed, not an instance\r\n\t\t\t\tif (typeof str === 'function') {\r\n\t\t\t\t\tvar storeId = str.id;\r\n\t\t\t\t\t// if there is NOT a .singleton property on the store then this store has not been initialized yet, so do so\r\n\t\t\t\t\tif (!str.singleton) {\r\n\t\t\t\t\t\tstr.singleton = new str();\r\n\t\t\t\t\t\tif (storeId) {\r\n\t\t\t\t\t\t\tReflux.stores[storeId] = str.singleton;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// before we weren't sure if we were working with an instance or class, so now we know an instance is created set it\r\n\t\t\t\t\t// to the variables we were using so that we can just continue on knowing it's the instance we're working with\r\n\t\t\t\t\tthis.stores[i] = str = str.singleton;\r\n\t\t\t\t\t// the instance should have an .id property as well if the class does, so set that here\r\n\t\t\t\t\tstr.id = storeId;\r\n\t\t\t\t\t// if there is an id and there is a global state property for this store then merge\r\n\t\t\t\t\t// the properties from that global state into the default state of the store AND then\r\n\t\t\t\t\t// set the global state to that new state (since it may have previously been partial)\r\n\t\t\t\t\tif (storeId && Reflux.GlobalState[storeId]) {\r\n\t\t\t\t\t\tfor (var key in Reflux.GlobalState[storeId]) {\r\n\t\t\t\t\t\t\tstr.state[key] = Reflux.GlobalState[storeId][key];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tReflux.GlobalState[storeId] = str.state;\r\n\t\t\t\t\t// otherwise (if it has an id) set the global state to the default state of the store\r\n\t\t\t\t\t} else if (storeId) {\r\n\t\t\t\t\t\tReflux.GlobalState[storeId] = str.state;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// if no id, then no messing with global state\r\n\t\t\t\t}\r\n\t\t\t\t// listen/subscribe for the \".trigger()\" in the store, and track the unsubscribes so that we can unsubscribe on unmount\r\n\t\t\t\tif (!Reflux.serverMode) {\r\n\t\t\t\t\tthis.__storeunsubscribes__.push(str.listen(onStoreTrigger));\r\n\t\t\t\t}\r\n\t\t\t\t// run set state so that it mixes in the props from the store with the component\r\n\t\t\t\tvar updateObj = filterByStoreKeys(this.storeKeys, str.state);\r\n\t\t\t\tif (updateObj) {\r\n\t\t\t\t\tthis.setState(updateObj);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// mapStoreToState needs to know if is ready to map or must wait\r\n\t\tthis.__readytomap__ = true;\r\n\t\t// if there are mappings that were delayed, do them now\r\n\t\tvar dmaps = this.__delayedmaps__;\r\n\t\tif (dmaps) {\r\n\t\t\tfor (var j=0,jj=dmaps.length; j<jj; j++) {\r\n\t\t\t\tdmaps[j].func( dmaps[j].state );\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.__delayedmaps__ = null;\r\n\t};\r\n\t\r\n\t// on the unmount phase of the component unsubscribe that which we subscribed earlier to keep our garbage trail clean\r\n\tproto.componentWillUnmount = function () {\r\n\t\tif (this.__storeunsubscribes__) {\r\n\t\t\tfor (var i = 0, ii = this.__storeunsubscribes__.length; i < ii; i++) {\r\n\t\t\t\tthis.__storeunsubscribes__[i]();\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.__readytomap__ = false;\r\n\t};\r\n\t\r\n\t/**\r\n\t * this.mapStoreToState\r\n\t * This function allow you to supply map the state of a store to the\r\n\t * state of this component manually via your own logic. This method\r\n\t * is completely separate from this.store/this.stores and/or this.storeKeys.\r\n\t * Call this function with an ES6 store (class or singleton instance) as the\r\n\t * first argument and your filter function as the second. Your filter function\r\n\t * will receive an object of the parts of the ES6 store being updated every\r\n\t * time its setState is called. Your filter function then returns an object\r\n\t * which will be merged with the component state (IF it has any properties at all,\r\n\t * should you return a blank object the component will not rerender).\r\n\t */\r\n\tproto.mapStoreToState = function(store, filterFunc)\r\n\t{\r\n\t\t// make sure we have a proper singleton instance to work with\r\n\t\tif (typeof store === 'function') {\r\n\t\t\tif (store.singleton) {\r\n\t\t\t\tstore = store.singleton;\r\n\t\t\t} else {\r\n\t\t\t\tstore = Reflux.initStore(store);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// we need a closure so that the called function can remember the proper filter function to use, so function gets defined here\r\n\t\tvar self = this;\r\n\t\tfunction onMapStoreTrigger(obj) {\r\n\t\t\t// get an object \r\n\t\t\tvar update = filterFunc.call(self, obj);\r\n\t\t\t// if no object returned from filter functions do nothing\r\n\t\t\tif (!update) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// check if the update actually has any mapped props\r\n\t\t\t/*jshint unused: false */\r\n\t\t\tvar hasProps = false;\r\n\t\t\tfor (var check in update) {\r\n\t\t\t\thasProps = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t// if there were props mapped, then update via setState\r\n\t\t\tif (hasProps) {\r\n\t\t\t\tself.setState(update);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// add the listener to know when the store is triggered\r\n\t\tthis.__storeunsubscribes__ = this.__storeunsubscribes__ || [];\r\n\t\tthis.__storeunsubscribes__.push(store.listen(onMapStoreTrigger));\r\n\t\t\r\n\t\t// now actually run onMapStoreTrigger with the full store state so that we immediately have all store state mapped to component state\r\n\t\tif (this.__readytomap__) {\r\n\t\t\tonMapStoreTrigger(store.state);\r\n\t\t} else {\r\n\t\t\tthis.__delayedmaps__ = this.__delayedmaps__ || [];\r\n\t\t\tthis.__delayedmaps__.push({func:onMapStoreTrigger, state:store.state});\r\n\t\t}\r\n\t};\r\n\t\r\n\t/**\r\n\t * Reflux.Component.extend(OtherClass)\r\n\t * This allows you to get classes that extend off of another React.Component\r\n\t * inheriting class. For example if you're using a third party that uses\r\n\t * components that allow `class MyComponent extends LibComponent` (where LibComponent\r\n\t * itself extends React.Component) and you want to use that component with ES6 then\r\n\t * you can make a class `var MyDualComponent = Reflux.Component.extend(LibComponent);`\r\n\t * then you can use `class MyComponent extends MyDualComponent` to get the benefits\r\n\t * of both libraries.\r\n\t */\r\n\tRefluxComponent.extend = function(clss) {\r\n\t\treturn defineReact(null, null, clss);\r\n\t};\r\n\t\r\n\t// if is being manually called with an `extend` argument present then just return the created class\r\n\tif (extend) {\r\n\t\treturn RefluxComponent;\r\n\t}\r\n\t\r\n\t// otherwise set as Reflux.Component and continue with other normal definitions\r\n\tReflux.Component = RefluxComponent;\r\n\t\r\n\t// also set Reflux.PureComponent (if it exists) using the .extend feature\r\n\tif (_react.PureComponent) {\r\n\t\tReflux.PureComponent = RefluxComponent.extend(_react.PureComponent);\r\n\t}\r\n\t\r\n\t// ------------ END Reflux.Component ------------\r\n\t\r\n\t// --------- BEGIN Reflux.Store ------------\r\n\t/**\r\n\t * Reflux.Store:\r\n\t * Also implements optional Reflux.Store class that is idiomatic with\r\n\t * the React ES6 style. You extend Reflux.Store and then the rest works\r\n\t * the same as createStore, except the constructor instead of init, and\r\n\t * it holds state in a state property, and a .setState method is available\r\n\t * which automatically updates state and does a trigger. Then when using\r\n\t * with this.store or this.stores in an ES6 component just plass the class,\r\n\t * it will deal with a singleton instantiation of the class automatically.\r\n\t */\r\n\tvar RefluxStore = function() {\r\n\t\t// extending doesn't really work well here, so instead we create an internal instance\r\n\t\t// and just loop through its properties/methods and make a getter/setter for each\r\n\t\t// that will actually be getting and setting on that internal instance.\r\n\t\tthis.__store__ = Reflux.createStore();\r\n\t\tthis.state = {};\r\n\t\tvar self = this;\r\n\t\tfor (var key in this.__store__) {\r\n\t\t\t/*jshint loopfunc: true */\r\n\t\t\t(function (prop) {\r\n\t\t\t\tObject.defineProperty(self, prop, {\r\n\t\t\t\t\tget: function () { return self.__store__[prop]; },\r\n\t\t\t\t\tset: function (v) { self.__store__[prop] = v; }\r\n\t\t\t\t});\r\n\t\t\t})(key);\r\n\t\t}\r\n\t};\r\n\t\r\n\tproto = RefluxStore.prototype;\r\n\t\r\n\t// this defines the listenables property, mostly intended to be set as `this.listenables` in the constructor of the store\r\n\t// it is essentially a shortcut to the `listenToMany` method\r\n\tObject.defineProperty(proto, \"listenables\", {\r\n\t\tget: function () {\r\n\t\t\treturn this.__listenables__;\r\n\t\t},\r\n\t\tset: function (v) {\r\n\t\t\tvar Combined = {};\r\n\t\t\tif (Array.isArray(v)){\r\n\t\t\t\tv.forEach(function(obj) {\r\n\t\t\t\t\tfor (var key in obj) {\r\n\t\t\t\t\t\tCombined[key] = obj[key];\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tCombined = v;\r\n\t\t\t}\r\n\t\t\tthis.__listenables__ = Combined;\r\n\t\t\tthis.listenToMany(Combined);\r\n\t\t},\r\n\t\tenumerable: true,\r\n\t\tconfigurable: true\r\n\t});\r\n\t\r\n\t// allows simple usage of `this.setState(obj)` within the store to both update the state and trigger the store to update\r\n\t// components that it is attached to in a simple way that is idiomatic with React\r\n\tproto.setState = function (obj) {\r\n\t\t// Object.assign(this.state, obj); // later turn this to Object.assign and remove loop once support is good enough\r\n\t\tfor (var key in obj) {\r\n\t\t\tthis.state[key] = obj[key];\r\n\t\t}\r\n\t\t// if there's an id (i.e. it's being tracked by the global state) then make sure to update the global state\r\n\t\tif (this.id) {\r\n\t\t\tReflux.GlobalState[this.id] = this.state;\r\n\t\t}\r\n\t\t// trigger, because any component it's attached to is listening and will merge the store state into its own on a store trigger\r\n\t\tthis.trigger(obj);\r\n\t};\r\n\t\r\n\t// this is a static property so that other code can identify that this is a Reflux.Store class\r\n\t// has issues specifically when using babel to transpile your ES6 stores for IE10 and below, not documented and shouldn't use yet\r\n\tObject.defineProperty(RefluxStore, \"isES6Store\", {\r\n\t\tget: function () {\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\tenumerable: true,\r\n\t\tconfigurable: true\r\n\t});\r\n\t\r\n\t// allows a shortcut for accessing MyStore.singleton.state as MyStore.state (since common usage makes a singleton)\r\n\tObject.defineProperty(RefluxStore, \"state\", {\r\n\t\tget: function () {\r\n\t\t\tif (!this.singleton) {\r\n\t\t\t\tthrow new Error('Reflux.Store.state is inaccessible before the store has been initialized.');\r\n\t\t\t}\r\n\t\t\treturn this.singleton.state;\r\n\t\t},\r\n\t\tenumerable: true,\r\n\t\tconfigurable: true\r\n\t});\r\n\t\r\n\t/* NOTE:\r\n\tIf a Reflux.Store definition is given a static id property and used\r\n\tproperly within a Reflux.Component or with Reflux.initStore then\r\n\tit will be added to the Reflux.GlobalState object which automatically tracks the\r\n\tcurrent state of all such defined stores in the program. */\r\n\t\r\n\tReflux.Store = RefluxStore;\r\n\t// ----------- END Reflux.Store -------------\r\n\t\r\n\t// --------- BEGIN Reflux Static Props/Methods ------------\r\n\t/**\r\n\t * Reflux.GlobalState is where data is stored for any Reflux.Store that has a static id property. Each store's\r\n\t * state will be on the Reflux.GlobalState object with the id as the key. So a store with the id \"MyStore\" and\r\n\t * a state {\"color\":\"red\"} will end up with a Reflux.GlobalState of {\"MyStore\":{\"color\":\"red\"}}\r\n\t * Reflux.GlobalState is an accessible part of the API. However, keep in mind that non-primitive properties you\r\n\t * read off of it will continue to mutate and you can only manually mutate Reflux.GlobalState BEFORE any component\r\n\t * mounting of components with ES6 stores. For more functionality look to Reflux.setGlobalState to change the global\r\n\t * state at any point, and Reflux.getGlobalState to return a deep clone of the Reflux.GlobalState object which will\r\n\t * not continue to mutate as Reflux.GlobalState continues to mutate.\r\n\t */\r\n\tReflux.GlobalState = Reflux.GlobalState || {};\r\n\t\r\n\t/**\r\n\t * Reflux.stores\r\n\t * All initialized stores that have an id will have a reference to their singleton stored here with the key being the id.\r\n\t */\r\n\tReflux.stores = {};\r\n\t\r\n\t/**\r\n\t * Reflux.getGlobalState takes no arguments, and returns a deep clone of Reflux.GlobalState \r\n\t * which will not continue to mutate as Reflux.GlobalState does. It can essentially store\r\n\t * snapshots of the global state as the program goes for saving or for in-app time travel.\r\n\t */\r\n\tReflux.getGlobalState = function() {\r\n\t\treturn clone(Reflux.GlobalState);\r\n\t};\r\n\t\r\n\t/**\r\n\t * Reflux.setGlobalState takes one argument that is a representation of the a possible\r\n\t * global state. It updates all stores in the program to represent data in that given state.\r\n\t * This includes triggering those stores so that that state is represented in any Reflux.Component\r\n\t * instances they are attached to. Partial states may be given to it, and only the represented\r\n\t * stores/state values will be updated.\r\n\t */\r\n\tReflux.setGlobalState = function(obj) {\r\n\t\tfor (var storeID in obj) {\r\n\t\t\tif (Reflux.stores[storeID]) {\r\n\t\t\t\tReflux.stores[storeID].setState(obj[storeID]);\r\n\t\t\t} else {\r\n\t\t\t\tReflux.GlobalState[storeID] = obj[storeID];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\t/**\r\n\t * Reflux.initStore takes one argument (a class that extends Reflux.Store) and returns a singleton\r\n\t * intance of that class. Its main functionality is to be able to mimic what happens to stores attached to\r\n\t * this.store or this.stores during the mounting phase of a component without having to actually attach the\r\n\t * store to a component in order to work properly with the global state.\r\n\t */\r\n\t// Reflux.initializeGlobalStore is kept for backwards compatibility, but deprecated since the function is\r\n\t// now for more broad instantiation of globally stored AND non-globally stored classes\r\n\tReflux.initializeGlobalStore = Reflux.initStore = function(str) {\r\n\t\tvar storeId = str.id;\r\n\t\t// if they're initializing something twice then we're done already, return it\r\n\t\tif (str.singleton) {\r\n\t\t\treturn str.singleton;\r\n\t\t}\r\n\t\t// if no id then it's easy: just make new instance and set to singleton\r\n\t\tif (!storeId) {\r\n\t\t\tstr.singleton = new str();\r\n\t\t\treturn str.singleton;\r\n\t\t}\r\n\t\t// create the singleton and assign it to the class's singleton static property\r\n\t\tvar inst = str.singleton = new str();\r\n\t\t// store it on the Reflux.stores array to be accessible later\r\n\t\tReflux.stores[storeId] = inst;\r\n\t\t// the singleton instance itself should also have the id property of the class\r\n\t\tinst.id = storeId;\r\n\t\t// if the global state has something set for this id, copy it to the state and then\r\n\t\t// make sure to set the global state to the end result, since it may have only been partial\r\n\t\tif (Reflux.GlobalState[storeId]) {\r\n\t\t\tfor (var key in Reflux.GlobalState[storeId]) {\r\n\t\t\t\tinst.state[key] = Reflux.GlobalState[storeId][key];\r\n\t\t\t}\r\n\t\t\tReflux.GlobalState[storeId] = inst.state;\r\n\t\t// otherwise just set the global state to the default state of the class\r\n\t\t} else {\r\n\t\t\tReflux.GlobalState[storeId] = inst.state;\r\n\t\t}\r\n\t\t// returns the singleton itself, though it will also be accessible as as `MyClass.singleton`\r\n\t\treturn inst;\r\n\t};\r\n\t// --------- END Reflux Static Props/Methods ------------\r\n\t\r\n\t// so it knows not to redefine Reflux static stuff and stores if called again\r\n\t_defined = true;\r\n}\r\n\r\n// filters a state object by storeKeys array (if it exists)\r\n// if filtering and obj contains no properties to use, returns false to let the component know not to update\r\nfunction filterByStoreKeys(storeKeys, obj)\r\n{\r\n\t// if there are not storeKeys defined then simply return the whole original object\r\n\tif (!storeKeys) {\r\n\t\treturn obj;\r\n\t}\r\n\t// otherwise go through and only update properties that are in the storeKeys array, and return straight false if there are none\r\n\tvar doUpdate = false;\r\n\tvar updateObj = {};\r\n\tfor (var i = 0, ii = storeKeys.length; i < ii; i++) {\r\n\t\tvar prop = storeKeys[i];\r\n\t\tif (obj.hasOwnProperty(prop)) {\r\n\t\t\tdoUpdate = true;\r\n\t\t\tupdateObj[prop] = obj[prop];\r\n\t\t}\r\n\t}\r\n\treturn doUpdate ? updateObj : false;\r\n}\r\n\r\n// this is utilized by some of the global state functionality in order to get a clone that will\r\n// not continue to be modified as the GlobalState mutates\r\nfunction clone(frm, to) {\r\n\tif (frm === null || typeof frm !== \"object\") {\r\n\t\treturn frm;\r\n\t}\r\n\tif (frm.constructor !== Object && frm.constructor !== Array) {\r\n\t\treturn frm;\r\n\t}\r\n\tif (frm.constructor === Date || frm.constructor === RegExp || frm.constructor === Function ||\r\n\t\tfrm.constructor === String || frm.constructor === Number || frm.constructor === Boolean) {\r\n\t\treturn new frm.constructor(frm);\r\n\t}\r\n\tto = to || new frm.constructor();\r\n\tfor (var name in frm) {\r\n\t\tto[name] = typeof to[name] === \"undefined\" ? clone(frm[name], null) : to[name];\r\n\t}\r\n\treturn to;\r\n}\r\n\r\nmodule.exports = defineReact;\r\n\r\n"}